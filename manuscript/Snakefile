import util
import src
from src import allostery

from glob import glob
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

from plotnine import *
from plotnine.options import *

configfile: "config.yaml"

DATASETS = [
    "gfp-brightness",
    "laci-ec50",
    "laci-ginf",
    "laci-joint",
    "covid-exp",
    "covid-bind",
    "covid-joint",
]

TORCH_MODELS = [
    "lantern",
    "feedforward-K1-D1-W32",
    "feedforward-K8-D1-W32",
    "linear"
]

MODELS = TORCH_MODELS + ["globalep"]


include: "smk/data.smk"
include: "smk/lantern.smk"
include: "smk/feedforward.smk"
include: "smk/linear.smk"
include: "smk/globalep.smk"
include: "smk/allostery.smk"
include: "smk/simulate.smk"
include: "smk/specific.smk"

include: "smk/figures/cvr2.smk"
include: "smk/figures/calibration.smk"
include: "smk/figures/surface.smk"
include: "smk/figures/sample-size.smk"
include: "smk/figures/anglehist.smk"
include: "smk/figures/gradient.smk"
include: "smk/figures/robustness.smk"
include: "smk/figures/laplacian.smk"
include: "smk/figures/additivity.smk"
include: "smk/figures/highlight.smk"
include: "smk/figures/dimensions.smk"
include: "smk/figures/diffops.smk"
include: "smk/figures/sir.smk"
include: "smk/figures/nn-depth.smk"
include: "smk/figures/hyperparams.smk"
include: "smk/figures/effects.smk"
include: "smk/figures/affine.smk"
include: "smk/figures/sparse.smk"
include: "smk/figures/uncertainty.smk"

rule data:
    input:
        expand("data/processed/{ds}.pkl", ds=DATASETS)

rule train_ge:
    """
    Generate models (warning: computation intensive!)
    """
    input:
        expand("experiments/{dataset}/globalep/cv{cv}/model.pkl", cv=range(10), dataset=DATASETS),

rule train_ff:
    """
    Generate models (warning: computation intensive!)
    """
    input:
        expand("experiments/{dataset}/{model}/cv{cv}/model.pt", cv=range(10), model=["feedforward-K1-D1-W32", "feedforward-K8-D1-W32",], dataset=DATASETS),

rule train_torch:
    """
    Generate torch-based models (warning: computation intensive!)
    """
    input:
        expand(
            "experiments/{dataset}/{model}/cv{cv}/model.pt",
            cv=range(10),
            model=TORCH_MODELS,
            dataset=DATASETS,
        ),
        expand(
            "experiments/{dataset}/lantern/full/model.pt",
            dataset=["gfp-brightness", "laci-joint", "covid-joint"],
        ),
        expand(
            "experiments/{dataset}/lantern/full-r{r}/model.pt",
            dataset=["gfp-brightness", "laci-joint", "covid-joint"],
            r = range(2)
        ),
        expand(
            "experiments/{dataset}/{model}/cv{cv}-n{n}000/model.pt",
            dataset=["laci-joint", "gfp-brightness"],
            cv=range(10),
            model=["lantern", "feedforward-K8-D1-W32"],
            n=[5, 10, 15, 20, 25, 30, 35, 40]
        ),

rule train:
    """
    Generate models (warning: computation intensive!)
    """
    input:
        expand(
            "experiments/{dataset}/{model}/cv{cv}/model.pt",
            cv=range(10),
            model=TORCH_MODELS,
            dataset=DATASETS,
        ),
        expand(
            "experiments/{dataset}/globalep/cv{cv}/model.pkl",
            cv=range(10),
            dataset=DATASETS,
        ),

rule predict_torch:
    """
    Generate model predictions
    """
    input:
        expand(
            "experiments/{dataset}/{model}/cv{cv}/pred-val.csv",
            cv=range(10),
            model=TORCH_MODELS,
            dataset=DATASETS,
        ),
        expand(
            "experiments/{dataset}/{model}/cv{cv}-n{n}000/pred-val.csv",
            dataset=["laci-joint", "gfp-brightness"],
            cv=range(10),
            model=["lantern", "feedforward-K8-D1-W32"],
            n=[5, 10, 15, 20, 25, 30, 35, 40]
        ),

rule predict_ge:
    """
    Generate model predictions
    """
    input:
        expand(
            "experiments/{dataset}/globalep/cv{cv}/pred-val.csv",
            cv=range(10),
            dataset=DATASETS,
        )

rule predict:
    """
    Generate model predictions
    """
    input:
        rules.predict_torch.input,
        rules.predict_ge.input,

rule exp_figures:
    """
    Generate experiment figures for the manuscript.
    """
    input:
        # "figures/cvr2.png",
        # "figures/laci-joint/sample-size-ec50-norm.png",
        # "figures/laci-joint/sample-size-ginf-norm.png",
        # "figures/gfp-brightness/sample-size-phenotype.png",
        # "figures/covid-joint/sample-size-func_score_norm_exp.png",
        # "figures/covid-joint/sample-size-func_score_norm_bind.png",
        expand(
            "figures/{dstarg}/{fig}.png",
            dstarg=[
                "laci-joint/ec50",
                "laci-joint/ginf",
                "covid-joint/exp",
                "covid-joint/bind",
                "gfp-brightness/brightness",
            ],
            fig=[
                "surface",
                "gradient",
                "robustness",
                "robustness-distance",
                "laplacian",
                "additivity",
                "additivity-distance",
                "diffops-distance",
            ],
        ),
        expand(
            "figures/{dstarg}/{fig}.png",
            dstarg=[
                "allostery1-joint/log_ec50",
                "allostery2-joint/log_ec50",
                "allostery3-joint/log_ec50",
            ],
            fig=[
                "surface",
                # "gradient",
                # "robustness",
                # "robustness-distance",
                # "laplacian",
                # "additivity",
                # "additivity-distance",
                # "diffops-distance",
            ],
        ),
        expand(
            "figures/{dstarg}/{fig}-r{r}.png",
            dstarg=[
                "laci-joint/ec50",
                "laci-joint/ginf",
                "covid-joint/exp",
                "covid-joint/bind",
                "gfp-brightness/brightness",
            ],
            fig=[
                "surface",
            ],
            r = range(1, 3),
        ),
        expand(
            "figures/{dstarg}/{fig}-slice-z{k}.png",
            dstarg=[
                "laci-joint/ec50",
                "laci-joint/ginf",
                "gfp-brightness/brightness",
            ],
            fig=[
                "surface",
            ],
            k = range(2, 4),
        ),
        expand(
            "figures/{dstarg}/{fig}-slice-z{k}.png",
            dstarg=[
                "covid-joint/exp",
                "covid-joint/bind",
            ],
            fig=[
                "surface",
            ],
            k = range(2, 6),
        ),
        expand(
            "figures/{dstarg}/{fig}-kern-{k}.png",
            dstarg=[
                "laci-joint/ec50",
                "laci-joint/ginf",
                "covid-joint/exp",
                "covid-joint/bind",
                "gfp-brightness/brightness",
            ],
            fig=[
                "surface",
            ],
            k = ["rbf", "matern", "rq"]
        ),
        expand(
            "figures/{dstarg}/{fig}-r{r}.png",
            dstarg=[
                "laci-joint",
                "covid-joint",
                "gfp-brightness",
            ],
            fig=[
                "retrain-effects"
            ],
            r = range(1, 3),
        ),
        expand(
            "figures/{dstarg}/{fig}-r{r}.png",
            dstarg=[
                "laci-joint/ec50",
                "laci-joint/ginf",
            ],
            fig=[
                "surface",
            ],
            r = range(1, 6),
        ),
        expand(
            "figures/{dstarg}/{fig}-r{r}.png",
            dstarg=[
                "laci-joint",
            ],
            fig=[
                "retrain-effects"
            ],
            r = range(1, 6),
        ),
        expand(
            "figures/{dstarg}/{fig}.png",
            dstarg=[
                "laci-joint/ec50",
                "laci-joint/ginf",
                "gfp-brightness/brightness",
                # "covid-joint/exp",
                # "covid-joint/bind",
            ],
            fig=[
                "sir-effects",
                "sir-effects-corr",
                "sir-dims",
                "sir-variance",
            ],
        ),
        expand(
            "figures/{dataset}/{fig}.png",
            dataset=["laci-joint", "covid-joint", "gfp-brightness"],
            fig=[
                "anglehist",
                "effects-sparsity",
                "effects-significance-count",
                "effects-pairplot",
            ],
        ),
        # expand(
        #     "figures/sim{dataset}-phenotype/{fig}.png",
        #     dataset=["K1", "K2", "K4", "K6", "K8"],
        #     fig = ["dimensions"]
        # ),
        expand(
            "figures/{dataset}/affine-{fig}.png",
            fig = ["history", "effects"],
            dataset=["laci-joint", "gfp-brightness",
                     #"covid-joint"
            ],
        ),
        # highlights
        "figures/gfp-brightness/brightness/surface-focus.png",
        "figures/gfp-brightness/brightness/surface-bfp1.png",
        "figures/gfp-brightness/brightness/surface-bfp2.png",
        "figures/laci-joint/parametric.png",
        "figures/covid-joint/anglehist-highlight.png",
        "figures/covid-joint/axes-surface.png",
        "figures/covid-joint/parametric.png",
        "figures/covid-joint/variants.png",
        "figures/covid-joint/variants_project.png",
        "figures/dimensions.png",
    shell:
        "tar -czf figures.tar.gz figures/*"

rule pred_figures:
    """
    Generate prediction figures for the manuscript.
    """
    input:
        "figures/cvr2.png",
        "figures/laci-joint/sample-size-ec50-norm.png",
        #"figures/laci-joint/sample-size-ginf-norm.png",
        "figures/gfp-brightness/sample-size-phenotype.png",
        #"figures/covid-joint/sample-size-func_score_norm_exp.png",
        #"figures/covid-joint/sample-size-func_score_norm_bind.png",
        [
            f"figures/{ds}-{phen}/nn-depth-{targ}.png"
            for (ds, phen, targ) in [
                ("laci", "joint", "ec50-norm"),
                ("laci", "joint", "ginf-norm"),
                ("gfp", "brightness", "phenotype"),
                ("covid", "joint", "func_score_norm_bind"),
                ("covid", "joint", "func_score_norm_exp"),
            ]
        ],
        [
            f"figures/{ds}-{phen}/lantern-vary-k-{targ}.png"
            for (ds, phen, targ) in [
                ("laci", "joint", "ec50-norm"),
                # ("laci", "joint", "ginf-norm"),
                # ("gfp", "brightness", "phenotype"),
                # ("covid", "joint", "func_score_norm_bind"),
                # ("covid", "joint", "func_score_norm_exp"),
            ]
        ],
    shell:
        "tar -czf figures.tar.gz figures/*"

rule figures:
    """
    Generate all figures for the manuscript.
    """
    input:
        rules.exp_figures.input,
        rules.pred_figures.input,
    shell:
        "tar -czf figures.tar.gz figures/*"

rule help:
    """
    Print list of all targets with help.
    """
    run:
        for rule in workflow.rules:
            print(rule.name)
            print(rule.docstring)

rule environment:
    shell:
        """conda env export -n lantern > environment.yml"""
