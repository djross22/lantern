configfile: "config.yaml"

DATASETS = [
    "gfp-brightness",
    "laci-ec50",
    "laci-ginf",
    "laci-joint",
    "covid-exp",
    "covid-bind",
    "covid-joint",
]

TORCH_MODELS = [
    "lantern",
    "feedforward-K1-D1-W32",
    "feedforward-K8-D1-W32",
]

MODELS = TORCH_MODELS + ["globalep"]


include: "smk/data.smk"
include: "smk/lantern.smk"
include: "smk/feedforward.smk"
include: "smk/globalep.smk"

import util
import src
import matplotlib.pyplot as plt
import matplotlib as mpl
from plotnine import *
from plotnine.options import *


include: "smk/figures/cvr2.smk"
include: "smk/figures/calibration.smk"
include: "smk/figures/surface.smk"
include: "smk/figures/sample-size.smk"
include: "smk/figures/anglehist.smk"
include: "smk/figures/gradient.smk"

rule data:
    input:
        expand("data/processed/{ds}.pkl", ds=DATASETS)

rule train_ge:
    """
    Generate models (warning: computation intensive!)
    """
    input:
        expand("experiments/{dataset}/globalep/cv{cv}/model.pkl", cv=range(10), dataset=DATASETS),

rule train_ff:
    """
    Generate models (warning: computation intensive!)
    """
    input:
        expand("experiments/{dataset}/{model}/cv{cv}/model.pt", cv=range(10), model=["feedforward-K1-D1-W32", "feedforward-K8-D1-W32",], dataset=DATASETS),

rule train_torch:
    """
    Generate torch-based models (warning: computation intensive!)
    """
    input:
        expand(
            "experiments/{dataset}/{model}/cv{cv}/model.pt",
            cv=range(10),
            model=TORCH_MODELS,
            dataset=DATASETS,
        ),
        expand(
            "experiments/{dataset}/lantern/full/model.pt",
            dataset=["gfp-brightness", "laci-joint", "covid-joint"],
        ),
        expand(
            "experiments/{dataset}/{model}/cv{cv}-n{n}000/model.pt",
            dataset=["laci-joint", "gfp-brightness"],
            cv=range(10),
            model=["lantern", "feedforward-K8-D1-W32"],
            n=[5, 10, 15, 20, 25, 30, 35, 40]
        ),

rule train:
    """
    Generate models (warning: computation intensive!)
    """
    input:
        expand(
            "experiments/{dataset}/{model}/cv{cv}/model.pt",
            cv=range(10),
            model=TORCH_MODELS,
            dataset=DATASETS,
        ),
        expand(
            "experiments/{dataset}/globalep/cv{cv}/model.pkl",
            cv=range(10),
            dataset=DATASETS,
        ),

rule predict_torch:
    """
    Generate model predictions
    """
    input:
        expand(
            "experiments/{dataset}/{model}/cv{cv}/pred-val.csv",
            cv=range(10),
            model=TORCH_MODELS,
            dataset=DATASETS,
        ),
        expand(
            "experiments/{dataset}/{model}/cv{cv}-n{n}000/pred-val.csv",
            dataset=["laci-joint", "gfp-brightness"],
            cv=range(10),
            model=["lantern", "feedforward-K8-D1-W32"],
            n=[5, 10, 15, 20, 25, 30, 35, 40]
        ),

rule predict_ge:
    """
    Generate model predictions
    """
    input:
        expand(
            "experiments/{dataset}/globalep/cv{cv}/pred-val.csv",
            cv=range(10),
            dataset=DATASETS,
        )

rule predict:
    """
    Generate model predictions
    """
    input:
        rules.predict_torch.input,
        rules.predict_ge.input,

rule figures:
    """
    Generate figures for the manuscript.
    """
    input:
        "figures/cvr2.png",
        expand(
            "figures/{dstarg}/{fig}.png",
            dstarg=[
                "laci-joint/ec50",
                "laci-joint/ginf",
                "covid-joint/exp",
                "covid-joint/bind",
                "gfp-brightness/brightness",
            ],
            fig=["surface", "gradient"],
        ),
        "figures/laci-joint/sample-size-ec50.png",
        "figures/laci-joint/sample-size-ginf.png",
        expand(
            "figures/{dataset}/anglehist.png",
            dataset=["laci-joint", "covid-joint", "gfp-brightness"],
        ),
    group: "figure"
    shell:
        "tar -czf figures.tar.gz figures/*"

rule help:
    """
    Print list of all targets with help.
    """
    run:
        for rule in workflow.rules:
            print(rule.name)
            print(rule.docstring)
